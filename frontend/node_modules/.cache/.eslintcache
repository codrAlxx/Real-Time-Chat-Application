[{"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/index.js":"1","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/App.js":"2","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/index.js":"3","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/reducers/authReducer.js":"4","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/reducers/messengerReducer.js":"5","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/Register.jsx":"6","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/Login.jsx":"7","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/ProtectRoute.jsx":"8","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/Messenger.jsx":"9","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/ActiveFriend.jsx":"10","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/Friends.jsx":"11","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/RightSide.jsx":"12","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/types/messengerType.js":"13","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/types/authType.js":"14","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/actions/authAction.js":"15","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/actions/messengerAction.js":"16","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/FriendInfo.jsx":"17","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/MessageSend.jsx":"18","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/Message.jsx":"19","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/index.js":"20","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/index.js":"21","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/App.js":"22","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/reducers/authReducer.js":"23","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/reducers/messengerReducer.js":"24","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/Register.jsx":"25","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/Messenger.jsx":"26","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/ProtectRoute.jsx":"27","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/Login.jsx":"28","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/types/authType.js":"29","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/types/messengerType.js":"30","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/RightSide.jsx":"31","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/ActiveFriend.jsx":"32","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/Friends.jsx":"33","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/actions/authAction.js":"34","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/actions/messengerAction.js":"35","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/FriendInfo.jsx":"36","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/MessageSend.jsx":"37","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/Message.jsx":"38"},{"size":651,"mtime":1643491196000,"results":"39","hashOfConfig":"40"},{"size":631,"mtime":1645469874000,"results":"41","hashOfConfig":"40"},{"size":579,"mtime":1645482366000,"results":"42","hashOfConfig":"40"},{"size":2147,"mtime":1645473952000,"results":"43","hashOfConfig":"40"},{"size":3886,"mtime":1645483496000,"results":"44","hashOfConfig":"40"},{"size":4757,"mtime":1643494638000,"results":"45","hashOfConfig":"40"},{"size":2634,"mtime":1643505844000,"results":"46","hashOfConfig":"40"},{"size":342,"mtime":1645469874000,"results":"47","hashOfConfig":"40"},{"size":12408,"mtime":1645483496000,"results":"48","hashOfConfig":"40"},{"size":722,"mtime":1644787168000,"results":"49","hashOfConfig":"40"},{"size":2962,"mtime":1688509901128,"results":"50","hashOfConfig":"40"},{"size":2358,"mtime":1688509421881,"results":"51","hashOfConfig":"40"},{"size":708,"mtime":1645477332000,"results":"52","hashOfConfig":"40"},{"size":358,"mtime":1645473952000,"results":"53","hashOfConfig":"40"},{"size":2319,"mtime":1645473952000,"results":"54","hashOfConfig":"40"},{"size":2902,"mtime":1645477332000,"results":"55","hashOfConfig":"40"},{"size":1458,"mtime":1645480884000,"results":"56","hashOfConfig":"40"},{"size":2046,"mtime":1645491240000,"results":"57","hashOfConfig":"40"},{"size":3653,"mtime":1688512107648,"results":"58","hashOfConfig":"40"},{"size":651,"mtime":1643491196000,"results":"59","hashOfConfig":"60"},{"size":579,"mtime":1645482366000,"results":"61","hashOfConfig":"60"},{"size":631,"mtime":1645469874000,"results":"62","hashOfConfig":"60"},{"size":2147,"mtime":1645473952000,"results":"63","hashOfConfig":"60"},{"size":3886,"mtime":1645483496000,"results":"64","hashOfConfig":"60"},{"size":5520,"mtime":1688601051684,"results":"65","hashOfConfig":"60"},{"size":12414,"mtime":1688603080086,"results":"66","hashOfConfig":"60"},{"size":342,"mtime":1645469874000,"results":"67","hashOfConfig":"60"},{"size":2634,"mtime":1643505844000,"results":"68","hashOfConfig":"60"},{"size":358,"mtime":1645473952000,"results":"69","hashOfConfig":"60"},{"size":708,"mtime":1645477332000,"results":"70","hashOfConfig":"60"},{"size":2345,"mtime":1688602894853,"results":"71","hashOfConfig":"60"},{"size":709,"mtime":1688602684683,"results":"72","hashOfConfig":"60"},{"size":2936,"mtime":1688602716049,"results":"73","hashOfConfig":"60"},{"size":2319,"mtime":1645473952000,"results":"74","hashOfConfig":"60"},{"size":2902,"mtime":1645477332000,"results":"75","hashOfConfig":"60"},{"size":1445,"mtime":1688602702150,"results":"76","hashOfConfig":"60"},{"size":2046,"mtime":1645491240000,"results":"77","hashOfConfig":"60"},{"size":3588,"mtime":1688603243002,"results":"78","hashOfConfig":"60"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1g2tfdf",{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nx6435",{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/index.js",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/App.js",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/index.js",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/reducers/authReducer.js",["163"],"import { REGISTER_FAIL,REGISTER_SUCCESS,SUCCESS_MESSAGE_CLEAR,ERROR_CLEAR,USER_LOGIN_FAIL,USER_LOGIN_SUCCESS,LOGOUT_SUCCESS } from \"../types/authType\";\r\nimport deCodeToken from 'jwt-decode';\r\n\r\nconst authState = {\r\n     loading : true,\r\n     authenticate : false,\r\n     error : '',\r\n     successMessage: '',\r\n     myInfo : ''\r\n}\r\n\r\nconst tokenDecode = (token) =>{\r\n     const tokenDecoded = deCodeToken(token);\r\n     const expTime = new Date(tokenDecoded.exp*1000);\r\n     if(new Date() > expTime){\r\n          return null;\r\n     }\r\n     return tokenDecoded;\r\n\r\n}\r\n\r\nconst getToken = localStorage.getItem('authToken');\r\nif(getToken){\r\n     const getInfo = tokenDecode(getToken);\r\n     if(getInfo){\r\n          authState.myInfo = getInfo;\r\n          authState.authenticate = true;\r\n          authState.loading = false;\r\n     }\r\n}\r\nconsole.log(getToken);\r\n\r\nexport const authReducer = (state = authState, action) => {\r\n     const {payload,type} = action;\r\n\r\n     if(type === REGISTER_FAIL || type === USER_LOGIN_FAIL){\r\n          return {\r\n               ...state,\r\n               error : payload.error,\r\n               authenticate : false,\r\n               myInfo : '',\r\n               loading : true\r\n          }\r\n     }\r\n\r\n     if(type === REGISTER_SUCCESS || type === USER_LOGIN_SUCCESS){\r\n          const myInfo = tokenDecode(payload.token);\r\n          return{\r\n               ...state,\r\n               myInfo : myInfo,\r\n               successMessage : payload.successMessage,\r\n               error : '',\r\n               authenticate : true,\r\n               loading: false\r\n\r\n          }\r\n\r\n     } \r\n\r\n\r\n     if(type === SUCCESS_MESSAGE_CLEAR){\r\n          return {\r\n               ...state,\r\n               successMessage : ''\r\n          }\r\n     }\r\n\r\n     if(type === ERROR_CLEAR){\r\n          return {\r\n               ...state,\r\n               error : ''\r\n          }\r\n     }\r\n\r\n\r\n     if(type === 'LOGOUT_SUCCESS'){\r\n          return {\r\n               ...state,\r\n               authenticate : false,\r\n               myInfo : '',\r\n               successMessage: 'Logout Successfull',\r\n              \r\n          }\r\n     }\r\n\r\n\r\n     return state;\r\n}","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/reducers/messengerReducer.js",["164"],"import {FRIEND_GET_SUCCESS,MESSAGE_GET_SUCCESS,MESSAGE_SEND_SUCCESS,SOCKET_MESSAGE,UPDATE_FRIEND_MESSAGE,MESSAGE_SEND_SUCCESS_CLEAR,SEEN_MESSAGE,DELIVARED_MESSAGE,UPDATE,MESSAGE_GET_SUCCESS_CLEAR,SEEN_ALL} from \"../types/messengerType\";\r\n\r\nconst messengerState = {\r\n     friends : [],\r\n     message : [],\r\n     mesageSendSuccess : false,\r\n     message_get_success : false,\r\n     themeMood : '',\r\n     new_user_add : ''\r\n}\r\n\r\nexport const messengerReducer = (state=messengerState,action) => {\r\n     const {type,payload} = action;\r\n\r\n\r\n     if(type === 'THEME_GET_SUCCESS' || type === 'THEME_SET_SUCCESS'){\r\n          return {\r\n               ...state,\r\n               themeMood : payload.theme\r\n          }\r\n     }\r\n\r\n\r\n\r\n\r\n\r\n     if(type === FRIEND_GET_SUCCESS){\r\n          return {\r\n               ...state,\r\n               friends : payload.friends\r\n          }\r\n     }\r\n\r\n     if(type === MESSAGE_GET_SUCCESS){\r\n          return {\r\n               ...state,\r\n               message_get_success : true,\r\n               message : payload.message\r\n          }\r\n     }\r\n\r\n     if(type === MESSAGE_SEND_SUCCESS){\r\n          return {\r\n               ...state,\r\n               mesageSendSuccess : true,\r\n               message : [...state.message,payload.message]\r\n          }\r\n     }\r\n\r\n     if(type === SOCKET_MESSAGE){\r\n          return {\r\n               ...state,\r\n               message : [...state.message,payload.message]\r\n          }\r\n     }\r\n\r\n     if(type === UPDATE_FRIEND_MESSAGE){\r\n          const index = state.friends.findIndex(f=>f.fndInfo._id === payload.msgInfo.reseverId || f.fndInfo._id === payload.msgInfo.senderId);\r\n          state.friends[index].msgInfo = payload.msgInfo;\r\n          state.friends[index].msgInfo.status = payload.status;\r\n          return state;\r\n     }\r\n\r\n\r\n     \r\n     if(type === MESSAGE_SEND_SUCCESS_CLEAR){\r\n          return {\r\n               ...state,\r\n               mesageSendSuccess : false               \r\n          }\r\n     }\r\n\r\n\r\n     if(type === SEEN_MESSAGE){\r\n          const index = state.friends.findIndex(f=>f.fndInfo._id === payload.msgInfo.reseverId || f.fndInfo._id === payload.msgInfo.senderId);\r\n          state.friends[index].msgInfo.status = 'seen';\r\n         return {\r\n              ...state\r\n         };\r\n     }\r\n\r\n     if(type === DELIVARED_MESSAGE){\r\n          const index = state.friends.findIndex(f=>f.fndInfo._id === payload.msgInfo.reseverId || f.fndInfo._id === payload.msgInfo.senderId);\r\n          state.friends[index].msgInfo.status = 'delivared';\r\n         return {\r\n              ...state\r\n         };\r\n     }\r\n\r\n\r\n     if(type === UPDATE){\r\n          const index = state.friends.findIndex(f=>f.fndInfo._id === payload.id);\r\n          if(state.friends[index].msgInfo){\r\n               state.friends[index].msgInfo.status = 'seen';\r\n          }\r\n          return {\r\n               ...state\r\n          }\r\n     }\r\n\r\n     if(type === MESSAGE_GET_SUCCESS_CLEAR){\r\n          return {\r\n               ...state,\r\n               message_get_success : false\r\n          }\r\n     }\r\n\r\n     if(type === 'SEEN_ALL'){\r\n          const index = state.friends.findIndex(f=>f.fndInfo._id === payload.reseverId);\r\n          state.friends[index].msgInfo.status = 'seen';\r\n          return {\r\n               ...state\r\n          }\r\n     }\r\n\r\n     if(type === 'LOGOUT_SUCCESS'){\r\n          return {\r\n               ...state,\r\n               friends : [],\r\n               message : [],\r\n               mesageSendSuccess : false,\r\n               message_get_success : false,\r\n              \r\n          }\r\n     }\r\n\r\n     if(type === 'NEW_USER_ADD'){\r\n          return{\r\n               ...state,\r\n               new_user_add : payload.new_user_add\r\n          }\r\n     }\r\n\r\n     if(type === 'NEW_USER_ADD_CLEAR'){\r\n          return{\r\n               ...state,\r\n               new_user_add : ''\r\n          }\r\n     }\r\n \r\n\r\n\r\n     return state;\r\n}","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/Register.jsx",["165","166","167"],"import React, { useState,useEffect } from 'react';\r\nimport { Link,useNavigate } from 'react-router-dom';\r\nimport {useDispatch,useSelector} from \"react-redux\"\r\nimport { userRegister } from '../store/actions/authAction';\r\nimport { useAlert } from 'react-alert';\r\nimport { ERROR_CLEAR, SUCCESS_MESSAGE_CLEAR } from '../store/types/authType';\r\n\r\nconst Register = () => {\r\n\r\n     const navigate = useNavigate();\r\n     const alert = useAlert();\r\n\r\n     const {loading,authenticate,error,successMessage,myInfo} = useSelector(state=>state.auth);\r\n     console.log(myInfo);\r\n\r\n     const dispatch = useDispatch();\r\n\r\n     const [state,setstate] = useState({\r\n          userName : '',\r\n          email:'',\r\n          password:'',\r\n          confirmPassword : '',\r\n          image : ''\r\n     })\r\n\r\n     const [loadImage, setLoadImage] = useState('');\r\n\r\n     const inputHendle = e => {\r\n          setstate({\r\n               ...state,\r\n               [e.target.name] : e.target.value \r\n          })\r\n     }\r\n\r\n     const fileHendle = e =>{\r\n          if(e.target.files.length !==0){\r\n               setstate({\r\n                    ...state,\r\n                    [e.target.name] : e.target.files[0]\r\n               })\r\n          }\r\n\r\n          const reader = new FileReader();\r\n          reader.onload = () => {\r\n               setLoadImage(reader.result);\r\n          }\r\n          reader.readAsDataURL(e.target.files[0]);\r\n     }\r\n\r\n     const register = e =>{\r\n\r\n          const {userName,email,password,confirmPassword, image} = state;\r\n          e.preventDefault();\r\n\r\n          const formData = new FormData();\r\n\r\n          formData.append('userName',userName);\r\n          formData.append('email',email);\r\n          formData.append('password',password);\r\n          formData.append('confirmPassword',confirmPassword);\r\n          formData.append('image',image);\r\n\r\n          dispatch(userRegister(formData));          \r\n     }\r\n\r\n     useEffect(()=>{\r\n          if(authenticate){\r\n               navigate('/');\r\n          }\r\n          if(successMessage){\r\n               alert.success(successMessage);\r\n               dispatch({type : SUCCESS_MESSAGE_CLEAR })\r\n          }\r\n          if(error){\r\n               error.map(err=>alert.error(err));\r\n               dispatch({type : ERROR_CLEAR })\r\n          }\r\n\r\n     },[successMessage,error])\r\n\r\n\r\n  return (\r\n     <div className='register'>\r\n          <div className='card'>\r\n               <div className='card-header'>\r\n          <h3>Register</h3>\r\n               </div>\r\n\r\n     <div className='card-body'>\r\n          <form onSubmit={register}>\r\n               <div className='form-group'>\r\n                    <label htmlFor='username'>User Name</label>\r\n               <input type=\"text\" onChange={inputHendle} name=\"userName\" value={state.userName}  className='form-control' placeholder='User Name' id='username' /> \r\n               </div>\r\n\r\n               <div className='form-group'>\r\n                    <label htmlFor='email'>Email</label>\r\n               <input type=\"email\" onChange={inputHendle} name=\"email\" value={state.email}  className='form-control' placeholder='Email' id='email' /> \r\n               </div>\r\n\r\n               <div className='form-group'>\r\n                    <label htmlFor='password'>Password</label>\r\n               <input type=\"password\"  onChange={inputHendle} name=\"password\" value={state.password}  className='form-control' placeholder='Password' id='password' /> \r\n               </div>\r\n\r\n\r\n               <div className='form-group'>\r\n                    <label htmlFor='confirmPassword'>Confirm Password</label>\r\n               <input type=\"password\"  onChange={inputHendle} name=\"confirmPassword\" value={state.confirmPassword} className='form-control' placeholder='Confirm Password' id='confirmPassword' /> \r\n               </div>\r\n\r\n               <div className='form-group'>\r\n                  <div className='file-image'>\r\n                         <div className='image'>\r\n     {loadImage ? <img src={loadImage} /> : ''  }                         \r\n                         </div>\r\n               <div className='file'>\r\n               <label htmlFor='image'>Select Image</label>\r\n               <input type=\"file\" onChange={fileHendle}  name=\"image\" className='form-control' id='image' />\r\n               </div>\r\n\r\n             </div>\r\n               </div>\r\n\r\n               <div className='form-group'>\r\n               <input type=\"submit\" value=\"register\" className='btn' />\r\n               </div>\r\n\r\n\r\n               <div className='form-group'>\r\n     <span><Link to=\"/messenger/login\"> Login Your Account </Link></span>\r\n               </div>  \r\n          </form> \r\n     </div>\r\n\r\n\r\n               </div> \r\n\r\n     </div>\r\n\r\n     )\r\n};\r\n\r\nexport default Register;\r\n","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/Login.jsx",["168","169","170"],"import React, { useState,useEffect } from 'react';\r\nimport { Link,useNavigate } from 'react-router-dom';\r\nimport { userLogin } from '../store/actions/authAction';\r\nimport { useAlert } from 'react-alert';\r\nimport {useDispatch,useSelector} from \"react-redux\"\r\nimport { ERROR_CLEAR, SUCCESS_MESSAGE_CLEAR } from '../store/types/authType';\r\n\r\nconst Login = () => {\r\n\r\n     const navigate = useNavigate();\r\n\r\n     const alert = useAlert();\r\n\r\n     const {loading,authenticate,error,successMessage,myInfo} = useSelector(state=>state.auth);\r\n\r\n\r\n     const dispatch = useDispatch();\r\n\r\n     const [state, setState] = useState({\r\n          email: '',\r\n          password : ''\r\n     });\r\n\r\n     const inputHendle = e => {\r\n          setState({\r\n               ...state,\r\n               [e.target.name] : e.target.value \r\n          })\r\n     }\r\n\r\n     const login = (e) => {\r\n          e.preventDefault();\r\n          dispatch(userLogin(state))\r\n     }\r\n\r\n     useEffect(()=>{\r\n          if(authenticate){\r\n               navigate('/');\r\n          }\r\n          if(successMessage){\r\n               alert.success(successMessage);\r\n               dispatch({type : SUCCESS_MESSAGE_CLEAR })\r\n          }\r\n          if(error){\r\n               error.map(err=>alert.error(err));\r\n               dispatch({type : ERROR_CLEAR })\r\n          }\r\n\r\n     },[successMessage,error])\r\n\r\n     return (\r\n          <div className='register'>\r\n          <div className='card'>\r\n               <div className='card-header'>\r\n          <h3>Login</h3>\r\n               </div>\r\n\r\n     <div className='card-body'>\r\n          <form onSubmit={login}>\r\n                \r\n\r\n               <div className='form-group'>\r\n                    <label htmlFor='email'>Email</label>\r\n               <input type=\"email\" onChange={inputHendle} name=\"email\" value={state.email} className='form-control' placeholder='Email' id='email' /> \r\n               </div>\r\n\r\n               <div className='form-group'>\r\n                    <label htmlFor='password'>Password</label>\r\n               <input type=\"password\"  onChange={inputHendle} name=\"password\" value={state.password} className='form-control' placeholder='Password' id='password' /> \r\n               </div> \r\n\r\n\r\n               <div className='form-group'>\r\n               <input type=\"submit\" value=\"login\" className='btn' />\r\n               </div>\r\n\r\n\r\n               <div className='form-group'>\r\n     <span><Link to=\"/messenger/register\"> Don't have any Account </Link></span>\r\n               </div>  \r\n          </form> \r\n     </div>\r\n\r\n\r\n               </div> \r\n\r\n     </div>\r\n     \r\n          )\r\n};\r\n\r\nexport default Login;\r\n","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/ProtectRoute.jsx",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/Messenger.jsx",["171","172","173","174","175","176","177","178","179","180","181","182"],"import React,{ useEffect,useState,useRef } from 'react';\r\nimport { FaEllipsisH,FaEdit,FaSistrix,FaSignOutAlt } from \"react-icons/fa\";\r\nimport ActiveFriend from './ActiveFriend';\r\nimport Friends from './Friends';\r\nimport RightSide from './RightSide';\r\nimport {useDispatch ,useSelector } from 'react-redux';\r\nimport { getFriends,messageSend,getMessage,ImageMessageSend,seenMessage,updateMessage,getTheme,themeSet } from '../store/actions/messengerAction';\r\nimport {userLogout } from '../store/actions/authAction';\r\n\r\nimport toast,{Toaster} from 'react-hot-toast';\r\nimport {io} from 'socket.io-client';\r\nimport useSound from 'use-sound';\r\nimport notificationSound from '../audio/notification.mp3';\r\nimport sendingSound from '../audio/sending.mp3';\r\n\r\nconst Messenger = () => {\r\n\r\n const [notificationSPlay] = useSound(notificationSound);   \r\n const [sendingSPlay] = useSound(sendingSound);  \r\n\r\n const scrollRef = useRef();\r\n const socket = useRef();\r\n\r\n\r\n const {friends,message,mesageSendSuccess,message_get_success,themeMood,new_user_add} = useSelector(state => state.messenger );\r\n const {myInfo} = useSelector(state => state.auth);\r\n\r\n const [currentfriend, setCurrentFriend] = useState('');\r\n const [newMessage, setNewMessage] = useState('');\r\n\r\n const [activeUser, setActiveUser] = useState([]);\r\n const [socketMessage, setSocketMessage] = useState('');\r\n const [typingMessage, setTypingMessage] = useState('');\r\n\r\n useEffect(() => {\r\n    socket.current = io('ws://localhost:8000');\r\n    socket.current.on('getMessage',(data) => {\r\n        setSocketMessage(data);\r\n    })\r\n\r\n    socket.current.on('typingMessageGet',(data) => {\r\n     setTypingMessage(data);\r\n })\r\n\r\n socket.current.on('msgSeenResponse', msg => {\r\n     dispatch({\r\n          type : 'SEEN_MESSAGE',\r\n          payload : {\r\n               msgInfo : msg\r\n          }\r\n     })\r\n })\r\n\r\n socket.current.on('msgDelivaredResponse', msg => {\r\n     dispatch({\r\n          type : 'DELIVARED_MESSAGE',\r\n          payload : {\r\n               msgInfo : msg\r\n          }\r\n     })\r\n })\r\n\r\n socket.current.on('seenSuccess', data => {\r\n      dispatch({\r\n           type : 'SEEN_ALL',\r\n           payload : data\r\n      })\r\n })\r\n\r\n},[]);\r\n\r\n\r\nuseEffect(() => {\r\n    if(socketMessage && currentfriend){\r\n         if(socketMessage.senderId === currentfriend._id && socketMessage.reseverId === myInfo.id){\r\n              dispatch({\r\n                   type: 'SOCKET_MESSAGE',\r\n                   payload : {\r\n                        message: socketMessage\r\n                   }\r\n              })\r\n              dispatch(seenMessage(socketMessage));\r\n              socket.current.emit('messageSeen',socketMessage);\r\n              dispatch({\r\n               type: 'UPDATE_FRIEND_MESSAGE',\r\n               payload : {\r\n                    msgInfo : socketMessage,\r\n                    status : 'seen'\r\n               }\r\n          })\r\n         }\r\n    }\r\n    setSocketMessage('')\r\n },[socketMessage]);\r\n\r\n\r\n\r\nuseEffect(() => {\r\n     socket.current.emit('addUser', myInfo.id, myInfo)\r\n },[]);\r\n\r\n useEffect(() => {\r\n     socket.current.on('getUser', (users)=>{\r\n          const filterUser = users.filter(u => u.userId !== myInfo.id)\r\n          setActiveUser(filterUser);\r\n     })\r\n\r\n     socket.current.on('new_user_add',data => {\r\n          dispatch({\r\n               type : 'NEW_USER_ADD',\r\n               payload : {\r\n                    new_user_add : data\r\n               }\r\n          })\r\n     })\r\n\r\n\r\n\r\n },[]);\r\n\r\n useEffect(() => {\r\n      if(socketMessage && socketMessage.senderId !== currentfriend._id && socketMessage.reseverId === myInfo.id){\r\n           notificationSPlay();\r\n           toast.success(`${socketMessage.senderName} Send a New Message`)\r\n           dispatch(updateMessage(socketMessage));\r\n           socket.current.emit('delivaredMessage',socketMessage);\r\n           dispatch({\r\n            type: 'UPDATE_FRIEND_MESSAGE',\r\n            payload : {\r\n                 msgInfo : socketMessage,\r\n                 status : 'delivared'\r\n            }\r\n       })\r\n\r\n      }\r\n },[socketMessage]);\r\n\r\n\r\n \r\n\r\n const inputHendle = (e) => {\r\n     setNewMessage(e.target.value);\r\n\r\n     socket.current.emit('typingMessage',{\r\n          senderId : myInfo.id,\r\n          reseverId : currentfriend._id,\r\n          msg : e.target.value\r\n     })\r\n\r\n }\r\n \r\n const sendMessage = (e) => {\r\n     e.preventDefault();\r\n     sendingSPlay();\r\n     const data = {\r\n          senderName : myInfo.userName,\r\n          reseverId : currentfriend._id,\r\n          message : newMessage ? newMessage : '❤'\r\n     }\r\n\r\n     \r\n     socket.current.emit('typingMessage',{\r\n          senderId : myInfo.id,\r\n          reseverId : currentfriend._id,\r\n          msg : ''\r\n     })\r\n\r\n     dispatch(messageSend(data));\r\n     setNewMessage('')\r\n }\r\n\r\n\r\n useEffect(() => {\r\n      if(mesageSendSuccess){\r\n          socket.current.emit('sendMessage', message[message.length -1 ]);\r\n          dispatch({\r\n               type: 'UPDATE_FRIEND_MESSAGE',\r\n               payload : {\r\n                    msgInfo : message[message.length -1]\r\n               }\r\n          })\r\n          dispatch({\r\n               type: 'MESSAGE_SEND_SUCCESS_CLEAR'\r\n          })\r\n      }\r\n},[mesageSendSuccess]);\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n     const dispatch = useDispatch();\r\n     useEffect(() => {\r\n          dispatch(getFriends());\r\n          dispatch({type:'NEW_USER_ADD_CLEAR'})\r\n     },[new_user_add]);\r\n\r\n     useEffect(() => {\r\n         if(friends && friends.length > 0)\r\n         setCurrentFriend(friends[0].fndInfo)\r\n       \r\n     },[friends]);\r\n\r\n\r\n     useEffect(() => {\r\n          dispatch(getMessage(currentfriend._id));\r\n          if(friends.length > 0){\r\n              \r\n          }\r\n      },[ currentfriend?._id]);\r\n\r\n\r\n      useEffect(() => {\r\n           if(message.length > 0){\r\n                if(message[message.length -1].senderId !== myInfo.id && message[message.length -1].status !== 'seen'){\r\n                    dispatch({\r\n                         type: 'UPDATE',\r\n                         payload : {\r\n                              id : currentfriend._id\r\n                         }\r\n                    })\r\n                     socket.current.emit('seen', { senderId: currentfriend._id, reseverId: myInfo.id })\r\n                dispatch(seenMessage({ _id: message[message.length -1]._id }))\r\n               }\r\n           }\r\n           dispatch ({\r\n                type: 'MESSAGE_GET_SUCCESS_CLEAR'\r\n           })\r\n           \r\n      },[ message_get_success]);\r\n\r\n\r\n \r\n      useEffect(() => {\r\n          scrollRef.current?.scrollIntoView({behavior: 'smooth'}) \r\n      },[ message]);\r\n \r\n\r\n     const emojiSend = (emu) => {\r\n          setNewMessage(`${newMessage}`+  emu);\r\n          socket.current.emit('typingMessage',{\r\n               senderId : myInfo.id,\r\n               reseverId : currentfriend._id,\r\n               msg : emu\r\n          })\r\n     }\r\n\r\n     const ImageSend = (e) => {\r\n\r\n          if(e.target.files.length !== 0){\r\n               sendingSPlay();\r\n               const imagename = e.target.files[0].name;\r\n               const newImageName = Date.now() + imagename;\r\n\r\n               socket.current.emit('sendMessage',{\r\n                    senderId: myInfo.id,\r\n                    senderName: myInfo.userName,\r\n                    reseverId: currentfriend._id,\r\n                    time: new Date(),\r\n                    message : {\r\n                         text : '',\r\n                         image : newImageName\r\n                    }\r\n               })\r\n\r\n               const formData = new FormData();\r\n\r\n               formData.append('senderName',myInfo.userName);\r\n               formData.append('imageName',newImageName);\r\n               formData.append('reseverId',currentfriend._id);\r\n               formData.append('image', e.target.files[0]);\r\n               dispatch(ImageMessageSend(formData));\r\n                \r\n          } \r\n         \r\n     }\r\n\r\n     const [hide, setHide] = useState(true);\r\n\r\n     const logout = () => {\r\n          dispatch(userLogout());\r\n          socket.current.emit('logout', myInfo.id);\r\n     }\r\n\r\n     useEffect(() => {\r\n         dispatch(getTheme());\r\n      },[ ]);\r\n \r\n      const search = (e) => {\r\n\r\n          const getFriendClass = document.getElementsByClassName('hover-friend');\r\n          const frienNameClass = document.getElementsByClassName('Fd_name');\r\n          for (var i = 0; i < getFriendClass.length, i < frienNameClass.length; i++) {\r\n              let text = frienNameClass[i].innerText.toLowerCase();\r\n              if (text.indexOf(e.target.value.toLowerCase()) > -1) {\r\n                  getFriendClass[i].style.display = '';\r\n              } else {\r\n                  getFriendClass[i].style.display = 'none';\r\n              }\r\n          }\r\n      }\r\n\r\n\r\n  return (\r\n       <div className={themeMood === 'dark' ? 'messenger theme' : 'messenger' }>\r\n            <Toaster\r\n            position={'top-right'}\r\n            reverseOrder = {false}\r\n            toastOptions={{\r\n                 style : {\r\n                      fontSize : '18px'\r\n                 }\r\n            }}\r\n            \r\n            />\r\n\r\n\r\n<div className='row'>\r\n     <div className='col-3'>\r\n          <div className='left-side'>\r\n               <div className='top'>\r\n                    <div className='image-name'>\r\n                         <div className='image'>\r\n                              <img src={`./image/${myInfo.image}`} alt='' />\r\n\r\n                         </div>\r\n                         <div className='name'>\r\n                         <h3>{myInfo.userName} </h3>\r\n                         </div>\r\n                       </div>\r\n\r\n                       <div className='icons'>\r\n  <div onClick={()=> setHide(!hide) }  className='icon'>\r\n                              <FaEllipsisH />\r\n                            </div>\r\n                            <div className='icon'>\r\n                                  <FaEdit/> \r\n                            </div>\r\n\r\n            <div className={hide ? 'theme_logout' : 'theme_logout show'}>\r\n                 <h3>Dark Mode </h3>\r\n            <div className='on'>\r\n                 <label htmlFor='dark'>ON</label>\r\n                 <input onChange={(e) => dispatch(themeSet(e.target.value)) } type=\"radio\" value=\"dark\" name=\"theme\" id=\"dark\" />\r\n                 </div>\r\n\r\n                 <div className='of'>\r\n                 <label htmlFor='white'>OFF</label>\r\n                 <input onChange={(e) => dispatch(themeSet(e.target.value)) } type=\"radio\" value=\"white\" name=\"theme\" id=\"white\" />\r\n                 </div>\r\n\r\n                 <div onClick={logout} className='logout'>\r\n               <FaSignOutAlt /> Logout\r\n                 </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                       </div>\r\n               </div>\r\n\r\n               <div className='friend-search'>\r\n                    <div className='search'>\r\n                    <button> <FaSistrix /> </button>\r\n  <input onChange={search} type=\"text\" placeholder='Search' className='form-control' />\r\n                    </div>\r\n               </div>\r\n\r\n               {/* <div className='active-friends'>\r\n     {\r\n        activeUser && activeUser.length > 0 ? activeUser.map(u =>  <ActiveFriend setCurrentFriend = {setCurrentFriend} user={u} />) : ''  \r\n     }\r\n                        \r\n               </div> */}\r\n\r\n               <div className='friends'>\r\n     {\r\n          friends && friends.length>0 ? friends.map((fd) => <div onClick={()=> setCurrentFriend(fd.fndInfo)} className={currentfriend._id === fd.fndInfo._id ? 'hover-friend active' : 'hover-friend' }> \r\n          <Friends activeUser= {activeUser} myId = {myInfo.id}  friend={fd} />\r\n          </div> ) : 'No Friend'\r\n     } \r\n                    \r\n                    \r\n\r\n               </div>\r\n\r\n          </div>\r\n                      \r\n                 </div>\r\n\r\n     {\r\n          currentfriend ?  <RightSide \r\n          currentfriend={currentfriend}\r\n          inputHendle={inputHendle}\r\n          newMessage={newMessage}\r\n          sendMessage={sendMessage}\r\n          message={message}\r\n          scrollRef= {scrollRef}\r\n          emojiSend = {emojiSend}\r\n          ImageSend= {ImageSend}\r\n          activeUser = {activeUser}\r\n          typingMessage = {typingMessage}\r\n          /> : 'Please Select your Friend'\r\n     }\r\n                \r\n\r\n            </div>\r\n\r\n       </div>\r\n  )\r\n};\r\n\r\nexport default Messenger;\r\n","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/ActiveFriend.jsx",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/Friends.jsx",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/RightSide.jsx",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/types/messengerType.js",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/types/authType.js",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/actions/authAction.js",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/store/actions/messengerAction.js",["183","184"],"import axios from 'axios';\r\nimport {FRIEND_GET_SUCCESS,MESSAGE_GET_SUCCESS,MESSAGE_SEND_SUCCESS,THEME_GET_SUCCESS,THEME_SET_SUCCESS} from \"../types/messengerType\";\r\n\r\nexport const getFriends = () => async(dispatch) => {\r\n     try{\r\n          const response = await axios.get('/api/messenger/get-friends');\r\n           dispatch({\r\n                type: FRIEND_GET_SUCCESS,\r\n                payload : {\r\n                     friends : response.data.friends\r\n                }\r\n           })\r\n\r\n     }catch (error){\r\n          console.log(error.response.data);\r\n     }\r\n}\r\n\r\nexport const messageSend = (data) => async(dispatch) => {\r\n    try{\r\n     const response = await axios.post('/api/messenger/send-message',data);\r\n     dispatch({\r\n          type : MESSAGE_SEND_SUCCESS,\r\n          payload : {\r\n               message : response.data.message\r\n          }\r\n     })\r\n    }catch (error){\r\n     console.log(error.response.data);\r\n    }\r\n}\r\n\r\n\r\nexport const getMessage = (id) => {\r\n     return async(dispatch) => {\r\n          try{\r\n               const response = await axios.get(`/api/messenger/get-message/${id}`)\r\n              dispatch({\r\n                   type : MESSAGE_GET_SUCCESS,\r\n                   payload : {\r\n                    message : response.data.message\r\n                   }\r\n              })\r\n          }catch (error){\r\n               console.log(error.response.data)\r\n          }\r\n     }\r\n}\r\n\r\n\r\nexport const ImageMessageSend = (data) => async(dispatch)=>{\r\n\r\n     try{\r\n          const response = await axios.post('/api/messenger/image-message-send',data);\r\n          dispatch({\r\n               type: MESSAGE_SEND_SUCCESS,\r\n               payload : {\r\n                    message : response.data.message\r\n               }\r\n          })\r\n     }catch (error){\r\n          console.log(error.response.data);\r\n\r\n     }\r\n\r\n}\r\n\r\nexport const seenMessage = (msg) => async(dispatch)=> {\r\n     try{\r\n          const response = await axios.post('/api/messenger/seen-message',msg);\r\n          console.log(response.data);\r\n     }catch (error){\r\n          console.log(error.response.message)\r\n\r\n     }\r\n}\r\n\r\n\r\nexport const updateMessage = (msg) => async(dispatch)=> {\r\n     try{\r\n          const response = await axios.post('/api/messenger/delivared-message',msg);\r\n          console.log(response.data);\r\n     }catch (error){\r\n          console.log(error.response.message)\r\n\r\n     }\r\n}\r\n\r\n\r\nexport const getTheme = () => async(dispatch) => {\r\n\r\n     const theme = localStorage.getItem('theme');\r\n     dispatch({\r\n          type: \"THEME_GET_SUCCESS\",\r\n          payload : {\r\n               theme : theme? theme : 'white'\r\n          }\r\n     })\r\n\r\n}\r\n\r\n\r\nexport const themeSet = (theme) => async(dispatch) => {\r\n\r\n     localStorage.setItem('theme',theme);\r\n     dispatch({\r\n          type: \"THEME_SET_SUCCESS\",\r\n          payload : {\r\n               theme : theme\r\n          }\r\n     })\r\n     \r\n}\r\n","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/FriendInfo.jsx",["185","186","187"],"import React from 'react';\r\nimport { FaCaretSquareDown,FaEdit,FaSistrix } from \"react-icons/fa\";\r\n\r\nconst FriendInfo = ({currentfriend,activeUser,message}) => {\r\n  return (\r\n       <div className='friend-info'>\r\n            <input type=\"checkbox\" id='gallery' />\r\n            <div className='image-name'>\r\n                 <div className='image'>\r\n                 <img src={`./image/${currentfriend.image}`} alt='' />\r\n                 </div>\r\n                 {\r\n           activeUser && activeUser.length > 0 && activeUser.some(u => u.userId === currentfriend._id) ? <div className='active-user'>Active</div> : ''\r\n      }     \r\n\r\n                \r\n\r\n     <div className='name'>\r\n          <h4>{currentfriend.userName} </h4>\r\n     </div>\r\n            </div>\r\n\r\n\r\n     <div className='others'>\r\n     <div className='custom-chat'>\r\n          <h3>Coustomise Chat </h3>\r\n          <FaCaretSquareDown/>\r\n     </div>\r\n\r\n     <div className='privacy'>\r\n          <h3>Privacy and Support </h3>\r\n          <FaCaretSquareDown/>\r\n     </div>\r\n\r\n     <div className='media'>\r\n          <h3>Shared Media </h3>\r\n        <label htmlFor='gallery'> <FaCaretSquareDown/> </label> \r\n     </div>\r\n     </div>\r\n \r\n     <div className='gallery'>\r\n     {\r\n          message && message.length>0 ? message.map((m,index)=>m.message.image && <img key={index} src={`./image/${m.message.image}`} />) : ''\r\n     }\r\n     </div> \r\n\r\n       </div>\r\n  )\r\n};\r\n\r\nexport default FriendInfo;\r\n","/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/MessageSend.jsx",[],"/Users/alok/Documents/Dev/Projects/Real-Time-Chat-Folder/RealTimeChatApp/frontend/src/components/Message.jsx",["188","189"],"import moment from 'moment';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FaRegCheckCircle } from \"react-icons/fa\";\r\n\r\nconst Message = ({message,currentfriend,scrollRef,typingMessage}) => {\r\n     const {myInfo} = useSelector(state=>state.auth);\r\n  return (\r\n     <>\r\n          <div className='message-show'>\r\n               {\r\n                    message && message.length > 0 ? \r\n                    message.map((m, index) => \r\n\r\n                    m.senderId === myInfo.id \r\n                    ? \r\n                    <div ref={scrollRef} className='my-message'>\r\n                         <div className='image-message'>\r\n                              <div className='my-text'>\r\n                              <p className='message-text'> {m.message.text === '' ? <img src={`./image/${m.message.image}`} />  : m.message.text } </p>\r\n                              {\r\n                                   index === message.length -1 && m.senderId === myInfo.id ? m.status === 'seen' ?  <img className='img' src={`./image/${currentfriend.image}`} alt='' /> : m.status === 'delivared' ? <span> <FaRegCheckCircle /> </span> : <span> <FaRegCheckCircle /> </span> : ''\r\n                              }\r\n                              </div>\r\n                         </div>\r\n                    \r\n                         <div className='time'>\r\n                              {moment(m.createdAt).startOf('mini').fromNow() }                \r\n                         </div>\r\n                    </div>         \r\n                    :  \r\n                    <div ref={scrollRef} className='fd-message'>\r\n                         <div className='image-message-time'>\r\n                              <img src={`./image/${currentfriend.image}`} alt='' />\r\n                              <div className='message-time'>\r\n                                   <div className='fd-text'>\r\n                                        <p className='message-text'> {m.message.text === '' ? <img src={`./image/${m.message.image}`} />  : m.message.text }  </p>\r\n                                   </div>\r\n                                   <div className='time'>\r\n                                        {moment(m.createdAt).startOf('mini').fromNow() }             \r\n                                   </div>\r\n                               \r\n                              </div>\r\n                         </div>\r\n                    </div>\r\n                    ) \r\n               : \r\n                    <div className='friend_connect'>\r\n                         <img src={`./image/${currentfriend.image}`} alt='' />\r\n                         <h3>{currentfriend.userName} Connect You </h3>\r\n                         <span> {moment(currentfriend.createdAt).startOf('mini').fromNow() } </span>\r\n                    </div>\r\n               }\r\n \r\n\r\n          </div>\r\n          {\r\n               typingMessage && typingMessage.msg && typingMessage.senderId === currentfriend._id \r\n               ? \r\n               <div className='typing-message'>\r\n                    <div className='fd-message'>\r\n                    <div className='image-message-time'>\r\n                         <img src={`./image/${currentfriend.image}`} alt='' />\r\n                         <div className='message-time'>\r\n                              <div className='fd-text'>\r\n                                   <p className='time'>Typing Message.... </p>\r\n                              </div>    \r\n                         </div>\r\n                    </div>\r\n                    </div>\r\n               </div> : ''\r\n          }\r\n\r\n     </>\r\n  )\r\n};\r\n\r\nexport default Message;\r\n","/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/index.js",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/index.js",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/App.js",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/reducers/authReducer.js",["190"],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/reducers/messengerReducer.js",["191"],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/Register.jsx",["192","193","194","195","196"],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/Messenger.jsx",["197","198","199","200","201","202","203","204","205","206","207","208"],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/ProtectRoute.jsx",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/Login.jsx",["209","210","211"],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/types/authType.js",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/types/messengerType.js",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/RightSide.jsx",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/ActiveFriend.jsx",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/Friends.jsx",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/actions/authAction.js",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/store/actions/messengerAction.js",["212","213"],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/FriendInfo.jsx",["214","215","216"],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/MessageSend.jsx",[],"/Users/alok/Documents/Dev/Projects/Try/RealTimeChatApp/frontend/src/components/Message.jsx",["217","218"],{"ruleId":"219","severity":1,"message":"220","line":1,"column":110,"nodeType":"221","messageId":"222","endLine":1,"endColumn":124},{"ruleId":"219","severity":1,"message":"223","line":1,"column":197,"nodeType":"221","messageId":"222","endLine":1,"endColumn":205},{"ruleId":"219","severity":1,"message":"224","line":13,"column":13,"nodeType":"221","messageId":"222","endLine":13,"endColumn":20},{"ruleId":"225","severity":1,"message":"226","line":79,"column":8,"nodeType":"227","endLine":79,"endColumn":30,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":115,"column":19,"nodeType":"231","endLine":115,"endColumn":42},{"ruleId":"219","severity":1,"message":"224","line":14,"column":13,"nodeType":"221","messageId":"222","endLine":14,"endColumn":20},{"ruleId":"219","severity":1,"message":"232","line":14,"column":55,"nodeType":"221","messageId":"222","endLine":14,"endColumn":61},{"ruleId":"225","severity":1,"message":"226","line":49,"column":8,"nodeType":"227","endLine":49,"endColumn":30,"suggestions":"233"},{"ruleId":"219","severity":1,"message":"234","line":3,"column":8,"nodeType":"221","messageId":"222","endLine":3,"endColumn":20},{"ruleId":"225","severity":1,"message":"235","line":70,"column":3,"nodeType":"227","endLine":70,"endColumn":5,"suggestions":"236"},{"ruleId":"225","severity":1,"message":"237","line":94,"column":4,"nodeType":"227","endLine":94,"endColumn":19,"suggestions":"238"},{"ruleId":"225","severity":1,"message":"239","line":100,"column":4,"nodeType":"227","endLine":100,"endColumn":6,"suggestions":"240"},{"ruleId":"225","severity":1,"message":"241","line":119,"column":4,"nodeType":"227","endLine":119,"endColumn":6,"suggestions":"242"},{"ruleId":"225","severity":1,"message":"243","line":136,"column":4,"nodeType":"227","endLine":136,"endColumn":19,"suggestions":"244"},{"ruleId":"225","severity":1,"message":"245","line":186,"column":3,"nodeType":"227","endLine":186,"endColumn":22,"suggestions":"246"},{"ruleId":"225","severity":1,"message":"235","line":198,"column":8,"nodeType":"227","endLine":198,"endColumn":22,"suggestions":"247"},{"ruleId":"225","severity":1,"message":"248","line":212,"column":9,"nodeType":"227","endLine":212,"endColumn":30,"suggestions":"249"},{"ruleId":"225","severity":1,"message":"250","line":232,"column":9,"nodeType":"227","endLine":232,"endColumn":31,"suggestions":"251"},{"ruleId":"225","severity":1,"message":"235","line":289,"column":9,"nodeType":"227","endLine":289,"endColumn":12,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":295,"column":52,"nodeType":"255","messageId":"256","endLine":295,"endColumn":53},{"ruleId":"219","severity":1,"message":"257","line":2,"column":69,"nodeType":"221","messageId":"222","endLine":2,"endColumn":86},{"ruleId":"219","severity":1,"message":"258","line":2,"column":87,"nodeType":"221","messageId":"222","endLine":2,"endColumn":104},{"ruleId":"219","severity":1,"message":"259","line":2,"column":28,"nodeType":"221","messageId":"222","endLine":2,"endColumn":34},{"ruleId":"219","severity":1,"message":"260","line":2,"column":35,"nodeType":"221","messageId":"222","endLine":2,"endColumn":44},{"ruleId":"229","severity":1,"message":"230","line":43,"column":83,"nodeType":"231","endLine":43,"endColumn":137},{"ruleId":"229","severity":1,"message":"230","line":20,"column":85,"nodeType":"231","endLine":20,"endColumn":127},{"ruleId":"229","severity":1,"message":"230","line":37,"column":95,"nodeType":"231","endLine":37,"endColumn":137},{"ruleId":"219","severity":1,"message":"220","line":1,"column":110,"nodeType":"221","messageId":"222","endLine":1,"endColumn":124},{"ruleId":"219","severity":1,"message":"223","line":1,"column":197,"nodeType":"221","messageId":"222","endLine":1,"endColumn":205},{"ruleId":"219","severity":1,"message":"224","line":13,"column":13,"nodeType":"221","messageId":"222","endLine":13,"endColumn":20},{"ruleId":"219","severity":1,"message":"232","line":13,"column":55,"nodeType":"221","messageId":"222","endLine":13,"endColumn":61},{"ruleId":"219","severity":1,"message":"261","line":77,"column":59,"nodeType":"221","messageId":"222","endLine":77,"endColumn":64},{"ruleId":"225","severity":1,"message":"226","line":104,"column":8,"nodeType":"227","endLine":104,"endColumn":30,"suggestions":"262"},{"ruleId":"229","severity":1,"message":"230","line":140,"column":19,"nodeType":"231","endLine":140,"endColumn":42},{"ruleId":"219","severity":1,"message":"234","line":3,"column":8,"nodeType":"221","messageId":"222","endLine":3,"endColumn":20},{"ruleId":"225","severity":1,"message":"235","line":70,"column":3,"nodeType":"227","endLine":70,"endColumn":5,"suggestions":"263"},{"ruleId":"225","severity":1,"message":"237","line":94,"column":4,"nodeType":"227","endLine":94,"endColumn":19,"suggestions":"264"},{"ruleId":"225","severity":1,"message":"239","line":100,"column":4,"nodeType":"227","endLine":100,"endColumn":6,"suggestions":"265"},{"ruleId":"225","severity":1,"message":"241","line":119,"column":4,"nodeType":"227","endLine":119,"endColumn":6,"suggestions":"266"},{"ruleId":"225","severity":1,"message":"243","line":136,"column":4,"nodeType":"227","endLine":136,"endColumn":19,"suggestions":"267"},{"ruleId":"225","severity":1,"message":"245","line":186,"column":3,"nodeType":"227","endLine":186,"endColumn":22,"suggestions":"268"},{"ruleId":"225","severity":1,"message":"235","line":198,"column":8,"nodeType":"227","endLine":198,"endColumn":22,"suggestions":"269"},{"ruleId":"225","severity":1,"message":"248","line":212,"column":9,"nodeType":"227","endLine":212,"endColumn":30,"suggestions":"270"},{"ruleId":"225","severity":1,"message":"250","line":232,"column":9,"nodeType":"227","endLine":232,"endColumn":31,"suggestions":"271"},{"ruleId":"225","severity":1,"message":"235","line":289,"column":9,"nodeType":"227","endLine":289,"endColumn":12,"suggestions":"272"},{"ruleId":"253","severity":1,"message":"254","line":295,"column":52,"nodeType":"255","messageId":"256","endLine":295,"endColumn":53},{"ruleId":"219","severity":1,"message":"224","line":14,"column":13,"nodeType":"221","messageId":"222","endLine":14,"endColumn":20},{"ruleId":"219","severity":1,"message":"232","line":14,"column":55,"nodeType":"221","messageId":"222","endLine":14,"endColumn":61},{"ruleId":"225","severity":1,"message":"226","line":49,"column":8,"nodeType":"227","endLine":49,"endColumn":30,"suggestions":"273"},{"ruleId":"219","severity":1,"message":"257","line":2,"column":69,"nodeType":"221","messageId":"222","endLine":2,"endColumn":86},{"ruleId":"219","severity":1,"message":"258","line":2,"column":87,"nodeType":"221","messageId":"222","endLine":2,"endColumn":104},{"ruleId":"219","severity":1,"message":"259","line":2,"column":28,"nodeType":"221","messageId":"222","endLine":2,"endColumn":34},{"ruleId":"219","severity":1,"message":"260","line":2,"column":35,"nodeType":"221","messageId":"222","endLine":2,"endColumn":44},{"ruleId":"229","severity":1,"message":"230","line":43,"column":83,"nodeType":"231","endLine":43,"endColumn":137},{"ruleId":"229","severity":1,"message":"230","line":20,"column":85,"nodeType":"231","endLine":20,"endColumn":114},{"ruleId":"229","severity":1,"message":"230","line":37,"column":95,"nodeType":"231","endLine":37,"endColumn":124},"no-unused-vars","'LOGOUT_SUCCESS' is defined but never used.","Identifier","unusedVar","'SEEN_ALL' is defined but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'alert', 'authenticate', 'dispatch', and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["274"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'myInfo' is assigned a value but never used.",["275"],"'ActiveFriend' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["276"],"React Hook useEffect has missing dependencies: 'currentfriend', 'dispatch', and 'myInfo.id'. Either include them or remove the dependency array.",["277"],"React Hook useEffect has a missing dependency: 'myInfo'. Either include it or remove the dependency array.",["278"],"React Hook useEffect has missing dependencies: 'dispatch' and 'myInfo.id'. Either include them or remove the dependency array.",["279"],"React Hook useEffect has missing dependencies: 'currentfriend._id', 'dispatch', 'myInfo.id', and 'notificationSPlay'. Either include them or remove the dependency array.",["280"],"React Hook useEffect has missing dependencies: 'dispatch' and 'message'. Either include them or remove the dependency array.",["281"],["282"],"React Hook useEffect has missing dependencies: 'dispatch' and 'friends.length'. Either include them or remove the dependency array.",["283"],"React Hook useEffect has missing dependencies: 'currentfriend._id', 'dispatch', 'message', and 'myInfo.id'. Either include them or remove the dependency array.",["284"],["285"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'THEME_GET_SUCCESS' is defined but never used.","'THEME_SET_SUCCESS' is defined but never used.","'FaEdit' is defined but never used.","'FaSistrix' is defined but never used.","'image' is assigned a value but never used.",["286"],["287"],["288"],["289"],["290"],["291"],["292"],["293"],["294"],["295"],["296"],["297"],{"desc":"298","fix":"299"},{"desc":"298","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"301","fix":"319"},{"desc":"298","fix":"320"},{"desc":"301","fix":"321"},{"desc":"303","fix":"322"},{"desc":"305","fix":"323"},{"desc":"307","fix":"324"},{"desc":"309","fix":"325"},{"desc":"311","fix":"326"},{"desc":"313","fix":"327"},{"desc":"315","fix":"328"},{"desc":"317","fix":"329"},{"desc":"301","fix":"330"},{"desc":"298","fix":"331"},"Update the dependencies array to be: [successMessage, error, authenticate, navigate, alert, dispatch]",{"range":"332","text":"333"},{"range":"334","text":"333"},"Update the dependencies array to be: [dispatch]",{"range":"335","text":"336"},"Update the dependencies array to be: [currentfriend, dispatch, myInfo.id, socketMessage]",{"range":"337","text":"338"},"Update the dependencies array to be: [myInfo]",{"range":"339","text":"340"},"Update the dependencies array to be: [dispatch, myInfo.id]",{"range":"341","text":"342"},"Update the dependencies array to be: [currentfriend._id, dispatch, myInfo.id, notificationSPlay, socketMessage]",{"range":"343","text":"344"},"Update the dependencies array to be: [dispatch, mesageSendSuccess, message]",{"range":"345","text":"346"},"Update the dependencies array to be: [dispatch, new_user_add]",{"range":"347","text":"348"},"Update the dependencies array to be: [currentfriend._id, dispatch, friends.length]",{"range":"349","text":"350"},"Update the dependencies array to be: [currentfriend._id, dispatch, message, message_get_success, myInfo.id]",{"range":"351","text":"352"},{"range":"353","text":"336"},{"range":"354","text":"333"},{"range":"355","text":"336"},{"range":"356","text":"338"},{"range":"357","text":"340"},{"range":"358","text":"342"},{"range":"359","text":"344"},{"range":"360","text":"346"},{"range":"361","text":"348"},{"range":"362","text":"350"},{"range":"363","text":"352"},{"range":"364","text":"336"},{"range":"365","text":"333"},[2305,2327],"[successMessage, error, authenticate, navigate, alert, dispatch]",[1330,1352],[2182,2184],"[dispatch]",[2925,2940],"[currentfriend, dispatch, myInfo.id, socketMessage]",[3028,3030],"[myInfo]",[3452,3454],"[dispatch, myInfo.id]",[4037,4052],"[currentfriend._id, dispatch, myInfo.id, notificationSPlay, socketMessage]",[5183,5202],"[dispatch, mesageSendSuccess, message]",[5375,5389],"[dispatch, new_user_add]",[5691,5712],"[currentfriend._id, dispatch, friends.length]",[6447,6469],"[currentfriend._id, dispatch, message, message_get_success, myInfo.id]",[8139,8142],[3068,3090],[2201,2203],[2944,2959],[3047,3049],[3471,3473],[4056,4071],[5202,5221],[5394,5408],[5710,5731],[6466,6488],[8158,8161],[1330,1352]]